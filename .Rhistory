forecast(fit,level=c(04,05,06),h=15)
forecast(fit,level=c(04),h=15)
??forecast
library(sqldf)
sqldf("select day,avg(temp) as avg_temp from beaver2 group by day;")
beaver2
sqldf("select day,avg(temp) as avg_temp from beaver2 group by day;")
beavers<-sqldf("select * from beaver1 union all select * from beaver2")
beavers
head(beavers)
install.packages('plyr')
install.packages('plyr')
install.packages('lubridate')
install.packages('stringr')
install.packages('ggplot2')
install.packages('reshape2')
install.packages('swirl')
forecast(fit,level=c(80,95,99), h=3)
install.packages('forecast')
Forecast.r
plot(forecast(fit), shadecols="oldstyle")
library(forecast)
fit <-auto.arima(mdeaths)
forecast(fit,level=c(80,95,99), h=3)
plot(forecast(fit), shadecols="oldstyle")
library(forecast)
fit <-auto.arima(mdeaths)
forecast(fit,level=c(80,95,99), h=3)
plot(forecast(fit), shadecols="oldstyle")
forecast(fit,level=c(80,95,98), h=3)
plot(forecast(fit), shadecols="oldstyle")
library(forecast)
fit <-auto.arima(mdeaths)
forecast(fit,level=c(80,95,98), h=3)
plot(forecast(fit), shadecols="oldstyle")
library(forecast)
fit <-auto.arima(mdeaths)
forecast(fit,level=c(80,95,98), h=2)
plot(forecast(fit), shadecols="oldstyle")
library(forecast)
fit <-auto.arima(mdeaths)
forecast(fit,level=c(80,95,98), h=2)
plot(forecast(fit), shadecols="oldstyle")
plot(forecast(fit), shadecols="oldstyle")
iris
??ddply
library(plyr)
ddply(iris, .(Species), summarise, mean_Petal_length(Petal.length))
ddply(iris, .(Species), summarise, mean_petal_length(Petal.Length))
ddply(iris, .(Species), summarise, mean_petal_length(Petal.Length))
ddply(iris,.(Species),summarize,mean_Petal_length(Petal.length))
ddply(iris,.(Species),summarize,mean_petal_length(Petal.length))
ddply(iris,.(Species),summarize,mean_petal_Length(Petal.length))
ddply(iris,.(Species),summarize,mean_petal_length=mean(Petal.length))
ddply(iris,.(Species),summarize,mean_petal_length=mean(Petal.Length))
library(Stringr)
library(stringr)
name(iris)
names(iris)
s<-c("Go to Heaven for the climate, Hell for the company.")
s
str_extract_all(s,"[H][a-z]+")
str_extract_all(s,"[H][a-z]")
str_extract_all(s,"[H]")
str_extract_all(s,"[H]+")
str_extract_all(s,"[z]+")
str_extract_all(s,"[e]+")
str_extract_all(s,"[e]")
??str_extract_all
library(reshape2)
iris$id
iris$id <-1:nrow(iris)
iris$id
??melt
names(iris)
iris.lng<-melt(iris,id=c("id","Species"))
names(iris)
iris.lng
head(iris.lng)
head(iris.wide)
iris.wide<-dcast(iris.lng, id+Species~variable)
head(iris.wide)
library(ggplot2)
iris.wide
p<-ggplot(aes(x=value,fill=Species), data=iris.lng)
p+geom_histogram()+facet_wrap(~variable,scales="free")
getwd
getwd()
swirl()
swirl
library(swirl)
rm(list=ls())
library(swirl)
swirl()
num_vect = c(0.5,55,-10,6)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
CV<-num_vect >=6
CV<-num_vect>=6
num_vect>=6
my_char<-c("My","name","is")
my_char
paste(my_char,collapse=" ")
c(my_char,"Srinivas")
my_name<-c(my_char,"Srinivas")
my_name
paste(my_name,collapse=" ")
paste("Hello", "world", sep=" ")
paste("Hello", "world!", sep=" ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERRS,1:4,sep="-")
paste(LETTERS,1:4,sep="-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
y
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
?pnorm()
pnorm(32.6,45,15)
x
rm(ls())
swirl()
swirl
library(swirl)
rm(list=ls())
x<-seq(5,15,length=1000)
x
y <- dnorm(x,mean=10, sd= 3)
plot(x,y,type="l",lwd=1)
?dnorm
plot(x,y,type="l",lwd=1)
z <- pnorm(x,mean=10, sd= 3)
plot(x,z,type="l",lwd=1)
?dnorm
?pmorm
?pnorm
pnorm(88,mean=64,sd=10.5,lower.tail=FALSE)
pnorm(88,mean=64,sd=10.5,lower.tail=TRUE)
pnorm(88,mean=64,sd=10.5,lower.tail=FALSE)
rm(list=ls())
library(swirl)
swirl()
quit()
odd_vector<-seq(1,100,by=2)
odd_vector
class(odd_vector)
input<-(1,2,3,4,5,8,6,2,11)
3by3<-matrix(input,nrow=3,ncol=3)
threebythree<-matrix(input,nrow=3,ncol=3)
rm(list=ls())
input<-c(1,2,3,4,5,8,6,2,11)
input
threebythree<-matrix(input,nrow=3,ncol=3)
View(threebythree)
trimatrix<-matrix(inp,nrow=3,ncol=3)
trimatrix
View(trimatrix)
inp
inp<-c(1,2,3,4,5,8,6,2,11)
v<-c(2,1,2,3,1,2,3,4,1,5,5,3,2,3)
uniq <-unique(v)
uniq
type(uniq)
typeof(uniq)
match(v,uniq)
?match
v
uniq
match(v,uniq)
length(v)
length(match(v,uniq))
tabulate(match(v,uniq))
?tabulate
tabulate(c(2,3,5))
x<-c(2,3,5)
x
tabulate(c(2,3,5))
which.max(tabulate(match(v,uniq)))
?which.max
x<-c(2,3,5)
which.max(x)
x<-c(2,3,5,6)
which.max(x)
uniq[which.max(tabulate(match(v,uniq)))]
x<-c(1,2,3,4,5,6,7,8,1,2)
length(x)
unique(x)
length(unique(x))
x<-"srini"
x
y<-"vas"
x+y
x|y
x||y
paste(x,y)
paste(x,y,sep="")
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
x
rowSums(x)
rowSum(x)
rowsum(x)
rowSums(x)
colSums()
colSums(x)
x<-1:100
plot(x,x^2)
plot(x,x^3)
plot(x,101-x)
plot(x,500/x)
x<-1:100
x
plot(x,x^2)
plot(x,x^3)
plot(x,101-x)
plot
plot(x,500/x)
cars<-(1,3,6,4,9)
cars<-c(1,3,6,4,9)
plot(cars)
plot(cars,type="o",col="blue")
plot(cars,type="f",col="blue")
plot(cars,type="o",col="blue")
plot(cars,type="o",col="blue",main="Autos",col.main="red",font.main=4)
trucks<-c(2,5,4,5,12)
plot(cars,type="o",col="blue",ylim=c(0,12))
lines(trucks,type="o",pch=22,lty=2,col="red")
title(main="Autos",col.main="red",lty=2,col="red")
title(main="Autos",col.main="red",lty=2,col="red",fon.main=4)
title(main="Autos",col.main="red",lty=2,col="red",font.main=4)
title(main="Autos",col.main="red",font.main=4)
?title
title(main=list("Autos",col="red",font=4))
source('D:/ACD_R/ACD_R_Assignments/Session8_Assignment/question1.R')
?plot
?boxplot
source('D:/ACD_R/ACD_R_Assignments/Session8_Assignment/question1.R')
source('D:/ACD_R/ACD_R_Assignments/Session8_Assignment/question1.R')
source('D:/ACD_R/ACD_R_Assignments/Session8_Assignment/question1.R')
source('D:/ACD_R/ACD_R_Assignments/Session8_Assignment/question1.R')
source('D:/ACD_R/ACD_R_Assignments/Session8_Assignment/question1.R')
source('D:/ACD_R/ACD_R_Assignments/Session8_Assignment/question1.R')
source('D:/ACD_R/ACD_R_Assignments/Session8_Assignment/question1.R')
n <- c(2,3,5)
s<-c("aa","bb","cc")
b<-c(TRUE,FALSE,TRUE)
df = data.frame(n,s,b)
df
url <- "D:\ACD_R\ACD_R_Assignments"
pwd
getwd()
data <- read.delim("001.dat", header = TRUE, sep="\t")
getwd
getwd()
data <- read.delim("001.dat", header = TRUE, sep="\t")
data
readLines("001.dat",10)
readLines("001.dat",20)
library(XML)
install.packages("XML")
library("XML")
xmlpath<-"iris"
xmlpath<-"iris.xml"
library(plyr)
ldp
ldply(xmlToList(x),data.frame)
ldply(xmlToList(xmlpath),data.frame)
?ldply
df<-ldply(xmlToList(xmlpath),data.frame)
df
l<-ldply(xmlToList(xmlpath))
l<-(xmlToList(xmlpath))
l
install.packages(RJSONIO)
install.packages("RJSONIO")
?toJSON
toJSON(l)
help(package="RJSONIO")
library(RJSONIO)
toJSON(l)
help(package="RJSONIO")
help(package="RJSONIO")
help(package="XML")
df
df
xmlpath
list<-xmlTreeParse(xmlpath)
list
toJSON(list)
toJSON?
?toJSON
a<-xmlToDataFrame(xmlpath)
a
a<-xmlToList(xmlpath)
a
a<-xmlToDataFrame(xmlpath)
a
summary(a)
?summary
summary(xmlpath)
help(package="RJSONIO")
a<-xmlToDataFrame(xmlpath)
a
toJSON(a)
b<-toJSON(a)
isValidJSON(b)
b
c<-Strict(a)
library(RJSONIO)
c<-Strict(a)
?Strict
x<-fromJSON(a)
x<-fromJSON(b)
x
typeof(x)
toJSON(1:10)
I(toJSON(1:10))
?I
fromJSON(I(toJSON(1:10)))
?fromJSON
fromJSON(I(toJSON(1:10)))
typeof(c(1:!0))
typeof(c(1:10))
typeof(c("dk","kd"))
fromJSON(I(toJSON(1:10+0.5)))
typeof(fromJSON(I(toJSON(1:10+0.5))))
?toJSON
toJSON(1:10)
toJSON(rnorm(3))
toJSON(rnorm(3),digits=4)
toJSON(rnorm(3),digits=1)
toJSON(c("Duncan","Temple Lang"))
toJSON(I(c("Duncan","Temple Lang")))
toJSON(list(1L, c("a", "b"), c(FALSE, FALSE, TRUE), rnorm(3)))
fromJSON(toJSON(list(1L, c("a", "b"), c(FALSE, FALSE, TRUE), rnorm(3))))
toJSON(fromJSON(toJSON(list(1L, c("a", "b"), c(FALSE, FALSE, TRUE), rnorm(3)))))
x = list(list(),
emptyNamedList,
I(list("hi")),
"hi",
I("hi"))
x
toJSON(x)
fromJSON(toJSON(x))
typeof(x)
df
?select
match(df)
filter(df)
filter(df, Sepal.length >4.5)
filter(df, length >4.5)
df
flights
mtcars
filter(mtcars,mpg==10.4)
filter(mtcars,mtcars$mpg==10.4)
?filter
x<-1:100
filter(x,rep(1,3))
rep(1,3)
?rep
?filter
presidents
filter(presidents,rep(1,3))
filter(presidents,rep(1,3),sides=1)
library(nycflights13)
library(nycflights)
install.packages("nycflights13")
library(nycflights)
library(nycflights13)
flights
View(df)
view(flights)
typeof(flights)
filter(flights,month==1)
filter(flights,flights$month==1)
filter(flights,flights$month==1,flights$day==31)
filter(flights, flights$month==1, flights$day==31)
flights
filter(flights, flights$month==1, flights$day==31)
filter(flights, flights$month==1, flights$day==1)
filter(flights, month == 1, day == 1)
filter(flights, month == 1, flights$day == 1)
iris
read.xml
toJSON(iris)
typeof(iris)
class(iris)
as.data.frame(fromJSON(toJSON(iris))
)
install.packages(car)
install.packages(car)
install.packages(cars)
install.packages(moments)
library(moments)
library(moments)
install.packages("moments")
install.packages("car")
?mfrow
par(mfrow=c(3,1))
x<-par(mfrow=c(3,1))
x
sample1.mean <-
replicate(mean(sample(x,size=sample.size1,replace=TRUE)),n=10000)
install.packages("mlbench")
HouseVotes84
data <- HouseVotes84
data(HouseVotes84)
data("HouseVotes84")
data(iris)
summary(iris)
installed.packages(mlbench)
installed.packages("mlbench")
install.packages(mlbench)
install.packages('mlbench')
data("HouseVotes84")
library(mlbench)
data("HouseVotes84")
View(HouseVotes84)
View(HouseVotes84)
train?
?train
??train
rm(list=Ls())
rm(list=ls())
library('ElemStatLearn')
install.packages('ElemStatLearn')
install.packages('klaR')
install.packages('caret')
library('ElemStatLearn')
library('klaR')
library('caret')
data(spam)
summary(spam)
View(spam)
View(spam)
?sample
nrow(spam)
nrow(spam) *.9
floor(4140.9)
sub=sample(nrow(spam),floor(nrow(spam)*.9))
train=spam[sub,]
test=spam[-sub,]
xTrain <- train[,-58]
yTrain <- train$spam
xTest <- test[,-58]
yTest <- test$spam
xTrain
View(xTrain)
view(xTest)
xTest <- test[,-58]
yTest <- test$spam
xTest
View(xTest)
?train
model <- train(xTrain,yTrain,'nb', trcontrol<-trainControl(method='cv',number=10))
model <- train(xTrain,yTrain,'nb', trcontrol=trainControl(method='cv',number=10))
library('e1071')
install.packages('e1071')
model <- train(xTrain,yTrain,'nb', trcontrol<-trainControl(method='cv',number=10))
model <- train(xTrain,yTrain,'nb', trcontrol=trainControl(method='cv',number=10))
warnings()
prop.table(table(predict(model$finalModel,xTest)$class,yTest))
table(predict(model$finalModel,xTest)$class,yTest)
warnings
warnings()
summary(model)
sample <- read.table("https://archive.ics.uci.edu/ml/machine-learning-databases/mushroom/agaricus-lepiota.data")
sample <- read.csv(url("https://archive.ics.uci.edu/ml/machine-learning-databases/mushroom/agaricus-lepiota.data"))
sample
names(sample)
head(sample)
source('D:/ACD_ML/ML_Project1/ml-prj1.R')
setwd("D:/ACD_ML/ML_Project1")
source('D:/ACD_ML/ML_Project1/ml-prj1.R')
source('D:/ACD_ML/ML_Project1/ml-prj1.R')
ncol(sample)
)
1:ncol(sample)
sapply(1:ncol(sample) , function(x)=Paste12{paste0("col",x)})
sapply(1:ncol(sample) , function(x) paste0("col",x) )
sapply(1:ncol(sample) , function(x) paste0("col",x))
colnames(sample) <- sapply(1:ncol(sample) , function(x) paste0("col",x))
colnames(sample)
sample$col23
source('D:/ACD_ML/ML_Project1/ml-prj1.R')
source('D:/ACD_ML/ML_Project1/ml-prj1.R')
source('D:/ACD_ML/ML_Project1/ml-prj1.R')
sample$col1
sample$col2
colnames(sample)[1]
colnames(sample)[1]<- "target"
table(sample$target,sample$col2)
source('D:/ACD_ML/ML_Project1/ml-prj1.R')
source('D:/ACD_ML/ML_Project1/ml-prj1.R')
rm(list=ls(TRUE))
rm(list=ls())
source('D:/ACD_ML/ML_Project1/ml-prj1.R')
source('D:/ACD_ML/ML_Project1/ml-prj1.R')
rm(list=ls())
install.packages("randomforest")
source('D:/ACD_ML/ML_Project1/ml-prj1.R')
